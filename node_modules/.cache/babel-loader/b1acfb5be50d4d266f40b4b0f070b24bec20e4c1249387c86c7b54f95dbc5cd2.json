{"ast":null,"code":"import * as XLSX from 'xlsx';\nexport default {\n  data() {\n    return {\n      jsonData: null,\n      expandedIndex: null,\n      searchQuery: ''\n    };\n  },\n  computed: {\n    filteredData() {\n      if (!this.searchQuery) return this.jsonData;\n      const lowerCaseQuery = this.searchQuery.toLowerCase();\n      return this.jsonData.filter(row => row.some(cell => cell.toString().toLowerCase().split(' ').some(word => word.includes(lowerCaseQuery))));\n    }\n  },\n  methods: {\n    handleFileUpload(event) {\n      // ... (existing code for reading Excel file)\n    },\n    toggleAccordion(index) {\n      this.expandedIndex = this.expandedIndex === index ? null : index;\n    },\n    updateCell(rowIndex, cellIndex) {\n      // Handle cell updates here (e.g., save to backend or local storage)\n    },\n    exportToExcel() {\n      // Implement Excel export logic here\n      // Create a new worksheet, populate it with modified JSON data, and save as Excel file\n      // You can use XLSX.write or similar methods\n    }\n    // Add similar method for PDF export\n  }\n};","map":{"version":3,"names":["XLSX","data","jsonData","expandedIndex","searchQuery","computed","filteredData","lowerCaseQuery","toLowerCase","filter","row","some","cell","toString","split","word","includes","methods","handleFileUpload","event","toggleAccordion","index","updateCell","rowIndex","cellIndex","exportToExcel"],"sources":["C:\\jj\\src\\App.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Excel to JSON Converter</h1>\n    <input type=\"file\" @change=\"handleFileUpload\" />\n    <input type=\"text\" v-model=\"searchQuery\" placeholder=\"Search...\" />\n\n    <!-- Edit Form -->\n    <div v-if=\"filteredData && filteredData.length\">\n      <div v-for=\"(row, rowIndex) in filteredData.slice(1)\" :key=\"rowIndex\" class=\"accordion-item\">\n        <div class=\"accordion-header\">\n          Row {{ rowIndex + 1 }}\n          <button @click=\"toggleAccordion(rowIndex)\" class=\"accordion-toggle\">\n            {{ expandedIndex === rowIndex ? '-' : '+' }}\n          </button>\n        </div>\n        <transition name=\"accordion\">\n          <div v-if=\"expandedIndex === rowIndex\" class=\"accordion-content\">\n            <table>\n              <tr v-for=\"(cell, cellIndex) in row\" :key=\"cellIndex\">\n                <th>{{ filteredData[0][cellIndex] }}</th>\n                <td>\n                  <!-- Editable input -->\n                  <input v-model=\"row[cellIndex]\" @input=\"updateCell(rowIndex, cellIndex)\" />\n                </td>\n              </tr>\n            </table>\n          </div>\n        </transition>\n      </div>\n    </div>\n\n    <!-- Export Buttons -->\n    <button @click=\"exportToExcel\">Export to Excel</button>\n    <!-- Add similar button for PDF export -->\n\n  </div>\n</template>\n\n<script>\nimport * as XLSX from 'xlsx';\n\nexport default {\n  data() {\n    return {\n      jsonData: null,\n      expandedIndex: null,\n      searchQuery: '',\n    };\n  },\n  computed: {\n    filteredData() {\n      if (!this.searchQuery) return this.jsonData;\n      const lowerCaseQuery = this.searchQuery.toLowerCase();\n      return this.jsonData.filter(row =>\n        row.some(cell =>\n          cell.toString().toLowerCase().split(' ').some(word => word.includes(lowerCaseQuery))\n        )\n      );\n    },\n  },\n  methods: {\n    handleFileUpload(event) {\n      // ... (existing code for reading Excel file)\n    },\n    toggleAccordion(index) {\n      this.expandedIndex = this.expandedIndex === index ? null : index;\n    },\n    updateCell(rowIndex, cellIndex) {\n      // Handle cell updates here (e.g., save to backend or local storage)\n    },\n    exportToExcel() {\n      // Implement Excel export logic here\n      // Create a new worksheet, populate it with modified JSON data, and save as Excel file\n      // You can use XLSX.write or similar methods\n    },\n    // Add similar method for PDF export\n  },\n};\n</script>\n  \n  <style scoped>\n  body {\n  font-family: Arial, sans-serif;\n  background-color: white;\n  color: lightslategray;\n  }\n  \n  h1 {\n  text-align: center;\n  margin-top: 20px;\n  color: lightslategray;\n  }\n  \n  input[type=\"file\"] {\n  display: block;\n  margin: 20px auto;\n  }\n  \n  .accordion-item {\n  border: 1px solid #ddd;\n  margin: 10px auto;\n  width: 80%;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n  }\n  \n  .accordion-header {\n  background-color: lightblue;\n  color: #fff;\n  padding: 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  }\n  \n  .accordion-header:hover {\n  background-color: darkcyan;\n  }\n  \n  .accordion-toggle {\n  background: none;\n  border: none;\n  font-size: 24px;\n  color: white;\n  cursor: pointer;\n  transition: transform 0.3s ease;\n  }\n  \n  .accordion-toggle:focus {\n  outline: none;\n  }\n  \n  .accordion-content {\n  padding: 15px;\n  background-color: white;\n  }\n  \n  table {\n  width: 100%;\n  border-collapse: collapse;\n  }\n  \n  th, td {\n  border: 1px solid white;\n  padding: 10px;\n  text-align: left;\n  }\n  \n  th {\n  background-color: white;\n  }\n  \n  .accordion-enter-active, .accordion-leave-active {\n  transition: max-height 0.3s ease;\n  }\n  \n  .accordion-enter, .accordion-leave-to {\n  max-height: 0;\n  overflow: hidden;\n  }\n  \n  .accordion-enter-to, .accordion-leave {\n  max-height: 500px;\n  overflow: hidden;\n  }\n  </style>"],"mappings":"AAuCA,OAAO,KAAKA,IAAG,MAAO,MAAM;AAE5B,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAE,IAAI;MACnBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,YAAYA,CAAA,EAAG;MACb,IAAI,CAAC,IAAI,CAACF,WAAW,EAAE,OAAO,IAAI,CAACF,QAAQ;MAC3C,MAAMK,cAAa,GAAI,IAAI,CAACH,WAAW,CAACI,WAAW,CAAC,CAAC;MACrD,OAAO,IAAI,CAACN,QAAQ,CAACO,MAAM,CAACC,GAAE,IAC5BA,GAAG,CAACC,IAAI,CAACC,IAAG,IACVA,IAAI,CAACC,QAAQ,CAAC,CAAC,CAACL,WAAW,CAAC,CAAC,CAACM,KAAK,CAAC,GAAG,CAAC,CAACH,IAAI,CAACI,IAAG,IAAKA,IAAI,CAACC,QAAQ,CAACT,cAAc,CAAC,CACrF,CACF,CAAC;IACH;EACF,CAAC;EACDU,OAAO,EAAE;IACPC,gBAAgBA,CAACC,KAAK,EAAE;MACtB;IAAA,CACD;IACDC,eAAeA,CAACC,KAAK,EAAE;MACrB,IAAI,CAAClB,aAAY,GAAI,IAAI,CAACA,aAAY,KAAMkB,KAAI,GAAI,IAAG,GAAIA,KAAK;IAClE,CAAC;IACDC,UAAUA,CAACC,QAAQ,EAAEC,SAAS,EAAE;MAC9B;IAAA,CACD;IACDC,aAAaA,CAAA,EAAG;MACd;MACA;MACA;IAAA;IAEF;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}