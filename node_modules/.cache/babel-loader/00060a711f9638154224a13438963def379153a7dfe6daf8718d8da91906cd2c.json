{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-7ba5bd90\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"excel-to-json\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Excel to JSON Converter\", -1 /* HOISTED */));\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  class: \"accordion-header\"\n};\nconst _hoisted_5 = [\"onClick\"];\nconst _hoisted_6 = {\n  key: 0,\n  class: \"accordion-content\"\n};\nconst _hoisted_7 = [\"onUpdate:modelValue\", \"onInput\"];\nconst _hoisted_8 = {\n  key: 1,\n  class: \"add-row\"\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h2\", null, \"Add New Row\", -1 /* HOISTED */));\nconst _hoisted_10 = [\"onUpdate:modelValue\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"input\", {\n    type: \"file\",\n    onChange: _cache[0] || (_cache[0] = (...args) => $options.handleFileUpload && $options.handleFileUpload(...args))\n  }, null, 32 /* NEED_HYDRATION */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.searchQuery = $event),\n    placeholder: \"Search...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createCommentVNode(\" Edit Form \"), $options.filteredData && $options.filteredData.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredData.slice(1), (row, rowIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: rowIndex,\n      class: \"accordion-item\"\n    }, [_createElementVNode(\"div\", _hoisted_4, [_createTextVNode(\" Row \" + _toDisplayString(rowIndex + 1) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.toggleAccordion(rowIndex),\n      class: \"accordion-toggle\"\n    }, _toDisplayString($data.expandedIndex === rowIndex ? '-' : '+'), 9 /* TEXT, PROPS */, _hoisted_5)]), _createVNode(_Transition, {\n      name: \"accordion\"\n    }, {\n      default: _withCtx(() => [$data.expandedIndex === rowIndex ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"table\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (cell, cellIndex) => {\n        return _openBlock(), _createElementBlock(\"tr\", {\n          key: cellIndex\n        }, [_createElementVNode(\"th\", null, _toDisplayString($options.filteredData[0][cellIndex]), 1 /* TEXT */), _createElementVNode(\"td\", null, [_createCommentVNode(\" Editable input \"), _withDirectives(_createElementVNode(\"input\", {\n          \"onUpdate:modelValue\": $event => row[cellIndex] = $event,\n          onInput: $event => $options.updateCell(rowIndex, cellIndex)\n        }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_7), [[_vModelText, row[cellIndex]]])])]);\n      }), 128 /* KEYED_FRAGMENT */))])])) : _createCommentVNode(\"v-if\", true)]),\n      _: 2 /* DYNAMIC */\n    }, 1024 /* DYNAMIC_SLOTS */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Input Form for Adding New Data \"), $data.jsonData && $data.jsonData.length ? (_openBlock(), _createElementBlock(\"div\", _hoisted_8, [_hoisted_9, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredData[0], (cell, cellIndex) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: cellIndex\n    }, [_withDirectives(_createElementVNode(\"input\", {\n      \"onUpdate:modelValue\": $event => $data.newRow[cellIndex] = $event,\n      placeholder: \"Enter value\"\n    }, null, 8 /* PROPS */, _hoisted_10), [[_vModelText, $data.newRow[cellIndex]]])]);\n  }), 128 /* KEYED_FRAGMENT */)), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.addNewRow && $options.addNewRow(...args))\n  }, \"Add Row\")])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Export Buttons \"), $data.jsonData && $data.jsonData.length ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.exportToExcel && $options.exportToExcel(...args))\n  }, \"Export to Excel\")) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Add similar button for PDF export \")]);\n}","map":{"version":3,"names":["class","_createElementVNode","key","_createElementBlock","_hoisted_1","_hoisted_2","type","onChange","_cache","args","$options","handleFileUpload","$event","$data","searchQuery","placeholder","_createCommentVNode","filteredData","length","_hoisted_3","_Fragment","_renderList","slice","row","rowIndex","_hoisted_4","_createTextVNode","_toDisplayString","onClick","toggleAccordion","expandedIndex","_hoisted_5","_createVNode","_Transition","name","default","_withCtx","_hoisted_6","cell","cellIndex","onInput","updateCell","_hoisted_7","_","jsonData","_hoisted_8","_hoisted_9","newRow","_hoisted_10","addNewRow","exportToExcel"],"sources":["C:\\jj\\src\\App.vue"],"sourcesContent":["<template>\n  <div class=\"excel-to-json\">\n    <h1>Excel to JSON Converter</h1>\n    <input type=\"file\" @change=\"handleFileUpload\" />\n    <input type=\"text\" v-model=\"searchQuery\" placeholder=\"Search...\" />\n\n    <!-- Edit Form -->\n    <div v-if=\"filteredData && filteredData.length\">\n      <div v-for=\"(row, rowIndex) in filteredData.slice(1)\" :key=\"rowIndex\" class=\"accordion-item\">\n        <div class=\"accordion-header\">\n          Row {{ rowIndex + 1 }}\n          <button @click=\"toggleAccordion(rowIndex)\" class=\"accordion-toggle\">\n            {{ expandedIndex === rowIndex ? '-' : '+' }}\n          </button>\n        </div>\n        <transition name=\"accordion\">\n          <div v-if=\"expandedIndex === rowIndex\" class=\"accordion-content\">\n            <table>\n              <tr v-for=\"(cell, cellIndex) in row\" :key=\"cellIndex\">\n                <th>{{ filteredData[0][cellIndex] }}</th>\n                <td>\n                  <!-- Editable input -->\n                  <input v-model=\"row[cellIndex]\" @input=\"updateCell(rowIndex, cellIndex)\" />\n                </td>\n              </tr>\n            </table>\n          </div>\n        </transition>\n      </div>\n    </div>\n\n    <!-- Input Form for Adding New Data -->\n    <div class=\"add-row\" v-if=\"jsonData && jsonData.length\">\n      <h2>Add New Row</h2>\n      <div v-for=\"(cell, cellIndex) in filteredData[0]\" :key=\"cellIndex\">\n        <input v-model=\"newRow[cellIndex]\" placeholder=\"Enter value\" />\n      </div>\n      <button @click=\"addNewRow\">Add Row</button>\n    </div>\n\n    <!-- Export Buttons -->\n    <button @click=\"exportToExcel\" v-if=\"jsonData && jsonData.length\">Export to Excel</button>\n    <!-- Add similar button for PDF export -->\n  </div>\n</template>\n\n<script>\nimport * as XLSX from 'xlsx';\n\nexport default {\n  data() {\n    return {\n      jsonData: [], // Ensure this is an array\n      expandedIndex: null,\n      searchQuery: '',\n      newRow: [], // New row for user input\n    };\n  },\n  computed: {\n    filteredData() {\n      if (!this.searchQuery) return this.jsonData;\n      const lowerCaseQuery = this.searchQuery.toLowerCase();\n      return this.jsonData.filter(row =>\n        row.some(cell =>\n          cell.toString().toLowerCase().split(' ').some(word => word.includes(lowerCaseQuery))\n        )\n      );\n    },\n  },\n  methods: {\n    handleFileUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          const data = new Uint8Array(e.target.result);\n          const workbook = XLSX.read(data, { type: 'array' });\n          const firstSheetName = workbook.SheetNames[0];\n          const worksheet = workbook.Sheets[firstSheetName];\n          this.jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n          this.newRow = Array(this.jsonData[0].length).fill(''); // Initialize newRow with empty strings\n        };\n        reader.readAsArrayBuffer(file);\n      }\n    },\n    toggleAccordion(index) {\n      this.expandedIndex = this.expandedIndex === index ? null : index;\n    },\n    updateCell(rowIndex, cellIndex) {\n      // Handle cell updates here (e.g., save to backend or local storage)\n    },\n    addNewRow() {\n      // Validate newRow and add it to jsonData\n      if (this.newRow.length === this.filteredData[0].length) {\n        this.jsonData.push([...this.newRow]); // Use spread operator to avoid reference issues\n        this.newRow = Array(this.jsonData[0].length).fill(''); // Clear input fields\n      } else {\n        // Handle validation error (e.g., show an error message)\n      }\n    },\n    exportToExcel() {\n      const ws = XLSX.utils.aoa_to_sheet(this.jsonData);\n      const wb = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');\n      XLSX.writeFile(wb, 'exported_data.xlsx');\n    },\n    // Add similar method for PDF export\n  },\n};\n</script>\n\n<style scoped>\nbody {\n  font-family: Arial, sans-serif;\n  background-color: white;\n  color: lightslategray;\n}\n\nh1 {\n  text-align: center;\n  margin-top: 20px;\n  color: lightslategray;\n}\n\ninput[type=\"file\"] {\n  display: block;\n  margin: 20px auto;\n}\n\n.excel-to-json {\n  font-family: Arial, sans-serif;\n  /* Add any additional styling here */\n}\n\n.accordion-item {\n  border: 1px solid #ddd;\n  margin: 10px auto;\n  width: 80%;\n  border-radius: 5px;\n  overflow: hidden;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  background-color: #fff;\n}\n\n.accordion-header {\n  background-color: lightblue;\n  color: #fff;\n  padding: 15px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n}\n\n.accordion-header:hover {\n  background-color: darkcyan;\n}\n\n.accordion-toggle {\n  background: none;\n  border: none;\n  font-size: 24px;\n  color: white;\n  cursor: pointer;\n  transition: transform 0.3s ease;\n}\n\n.accordion-toggle:focus {\n  outline: none;\n}\n\n.accordion-content {\n  padding: 15px;\n  background-color: white;\n}\n\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\n\nth, td {\n  border: 1px solid white;\n  padding: 10px;\n  text-align: left;\n}\n\nth {\n  background-color: white;\n}\n\n.accordion-enter-active, .accordion-leave-active {\n  transition: max-height 0.3s ease;\n}\n\n.accordion-enter, .accordion-leave-to {\n  max-height: 0;\n  overflow: hidden;\n}\n\n.accordion-enter-to, .accordion-leave {\n  max-height: 500px;\n  overflow: hidden;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}